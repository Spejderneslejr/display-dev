# https://taskfile.dev

version: '3'

vars:
  PLANTUML_RENDERER_VERSION: 1.2022.2
  DRAWIO_EXPORT_VERSION: 4.3.0

tasks:
  default:
    cmds:
      - task --list-all
    silent: true

  projects:clone:
    dir: projects
    cmds:
      - test -d display-api-service || git clone git@github.com:os2display/display-api-service.git
      - test -d display-admin-client || git clone git@github.com:os2display/display-admin-client.git
      - test -d display-client || git clone git@github.com:os2display/display-client.git
      - test -d display-templates || git clone https://github.com/os2display/display-templates.git

  projects:update:
    dir: projects
    cmds:
      # We pin to a commit prior to the tenant PR
      - cd display-api-service && git pull
      - cd display-admin-client && git pull
      - cd display-client && git pull
      - cd display-client/templates && git pull

  projects:git-reset:
    desc: Reset projects to upstream develop. This will DESTROY any local changes.
    dir: projects
    cmds:
      # We pin to a commit prior to the tenant PR
      - cd display-api-service && git reset --hard && git checkout develop && git pull
      - cd display-admin-client && git reset --hard && git checkout develop && git pull
      - cd display-client && git reset --hard && git checkout develop && git pull
      - cd display-templates && git reset --hard && git checkout develop && git pull

  projects:status:
    dir: projects
    cmds:
      - cd display-api-service && git status
      - cd display-admin-client && git status
      - cd display-client && git status
      - cd display-client/templates && git status

  display:reset:
    dir: projects/display-client
    cmds:
     - time ../../scripts/display-reset.sh

  display:down:
    dir: projects/display-client
    cmds:
     - docker compose down -v

  admin:reset:
    dir: projects/display-admin-client
    cmds:
     - time ../../scripts/admin-reset.sh

  admin:down:
    dir: projects/display-admin-client
    cmds:
      - docker compose down -v

  admin:logs:
    dir: projects/display-admin-client
    cmds:
      - docker compose logs -f

  api:reset:
    dir: projects/display-api-service
    cmds:
      - time ../../scripts/api-reset.sh
      - task: api:template-load

  api:logs:
    dir: projects/display-api-service
    cmds:
      - docker compose logs -f

  api:template-load:
    dir: projects/display-api-service
    cmds:
      - docker compose exec phpfpm bin/console app:screen-layouts:load https://raw.githubusercontent.com/os2display/display-templates/develop/build/screen-templates/full-screen.json
      - docker compose exec phpfpm bin/console app:template:load https://raw.githubusercontent.com/os2display/display-templates/develop/build/image-text/image-text.json
      - docker compose exec phpfpm bin/console app:template:load https://raw.githubusercontent.com/os2display/display-templates/develop/build/table/table.json

  api:down:
    dir: projects/display-api-service
    cmds:
      - docker compose down -v

  traefik:reset:
    cmds:
      - task: traefik:mkcert
      - time scripts/traefik-reset.sh

  traefik:logs:
    dir: traefik
    cmds:
      - docker compose logs -f

  traefik:down:
    dir: traefik
    cmds:
      - docker compose down

  traefik:mkcert:
    dir: traefik/certs
    cmds:
      - mkcert -cert-file local-cert.pem -key-file local-key.pem "*.local.itkdev.dk" "*.docker"
      - mkcert install

  reset:
    cmds:
      - docker network create frontend 2>/dev/null|| true
      - task: api:down
      - task: admin:down
      - task: display:down
      - task: api:reset
      - task: admin:reset
      - task: display:reset

  down:
    cmds:
      - task: traefik:down
      - task: api:down
      - task: admin:down
      - task: display:down

  diagrams:render:
    desc: Render all diagrams
    cmds:
      - task: diagrams:plantuml:render
      - task: diagrams:drawio:render

  diagrams:build:plantuml:
    desc: Build the container image we use for rendering plantuml
    dir: tools/plantuml
    cmds:
      # We do not publish the image as it is very then wrapper around a download
      # of platuml an as such having a published image would just be an extra
      # thing to keep track of.
      - IMAGE_URL=plantuml TAG=0.0.0 PLANTUML_VERSION={{.PLANTUML_RENDERER_VERSION}} task build

  diagrams:plantuml:render:
    desc: Render svg and png versions plantuml diagrams
    deps: [_diagrams:mkdir, diagrams:build:plantuml]
    dir: documentation
    cmds:
      # PDF is currently not supported: https://plantuml.com/pdf
      - |
        docker run \
          -v "${PWD}/diagrams/:/checkout" \
          -w "/checkout" \
          plantuml:0.0.0 \
          -verbose -tpng -o render-png *.puml

      - |
        docker run \
          -v "${PWD}/diagrams/:/checkout" \
          -w "/checkout" \
          plantuml:0.0.0 \
          -verbose -tsvg -o render-svg *.puml

  diagrams:drawio:render:
    desc: Render svg and png versions drawio diagrams
    deps: [_diagrams:mkdir]
    dir: documentation
    cmds:
      - |
        docker run \
          -v "${PWD}/diagrams:/data" rlespinasse/drawio-export:{{.DRAWIO_EXPORT_VERSION}} --remove-page-suffix --format png --output render-png --scale 2

      - |
        docker run \
          -v "${PWD}/diagrams:/data" rlespinasse/drawio-export:{{.DRAWIO_EXPORT_VERSION}} --remove-page-suffix --format svg --output render-svg --scale 2

  _diagrams:mkdir:
    cmds:
      - mkdir -p diagrams/render-png
      - mkdir -p diagrams/render-svg

  diagrams:clean:
    desc: Delete all rendered diagrams
    cmds:
      - rm -fr diagrams/render-png
      - rm -fr diagrams/render-svg
